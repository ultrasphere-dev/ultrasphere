@article{cohl_fourier_2012,
	title = {Fourier, Gegenbauer and Jacobi Expansions for a Power-Law Fundamental Solution of the Polyharmonic Equation and Polyspherical Addition Theorems},
	volume = {9},
	doi = {10.3842/SIGMA.2013.042},
	abstract = {We develop complex Jacobi, Gegenbauer and Chebyshev polynomial expansions for the kernels associated with power-law fundamental solutions of the polyharmonic equation on d-dimensional Euclidean space. From these series representations we derive Fourier expansions in certain rotationally-invariant coordinate systems and Gegenbauer polynomial expansions in Vilenkin's polyspherical coordinates. We compare both of these expansions to generate addition theorems for the azimuthal Fourier coefficients.},
	journaltitle = {Symmetry, Integrability and Geometry: Methods and Applications ({SIGMA})},
	shortjournal = {Symmetry, Integrability and Geometry: Methods and Applications ({SIGMA})},
	author = {Cohl, Howard},
	date = {2012-09-26},
}

@book{vilenkin_representation_1993,
	location = {Dordrecht},
	title = {Representation of Lie Groups and Special Functions},
	volume = {74},
	rights = {http://www.springer.com/tdm},
	isbn = {978-90-481-4103-6 978-94-017-2883-6},
	url = {http://link.springer.com/10.1007/978-94-017-2883-6},
	series = {Mathematics and Its Applications},
	publisher = {Springer Netherlands},
	author = {Vilenkin, N. Ja. and Klimyk, A. U.},
	editorb = {Hazewinkel, M.},
	editorbtype = {redactor},
	urldate = {2025-09-23},
	date = {1993},
	doi = {10.1007/978-94-017-2883-6},
	keywords = {differential equation, Group representation, integral transform, Jacobi, lie group},
}


@article{meurer_python_2023,
	title = {Python Array {API} Standard: Toward Array Interoperability in the Scientific Python Ecosystem},
	url = {https://proceedings.scipy.org/articles/gerudo-f2bc6f59-001},
	doi = {10.25080/gerudo-f2bc6f59-001},
	shorttitle = {Python Array {API} Standard},
	abstract = {The Python array {API} standard specifies standardized application programming interfaces and behaviors for array and tensor objects and operations. The establishment and subsequent adoption of the standard aims to reduce ecosystem fragmentation and facilitate array library interoperability.},
	journaltitle = {scipy},
	author = {Meurer, Aaron and Reines, Athan and Gommers, Ralf and Fang, Yao-Lung L. and Kirkham, John and Barber, Matthew and Hoyer, Stephan and Müller, Andreas and Zha, Sheng and Shanabrook, Saul and Gacha, Stephannie Jiménez and Lezcano-Casado, Mario and Fan, Thomas J. and Reddy, Tyler and Passos, Alexandre and Kwon, Hyukjin and Oliphant, Travis and Standards, Consortium for Python Data {API}},
	urldate = {2025-09-23},
	date = {2023-06-01},
	langid = {english}
}


@article{harris_array_2020,
	title = {Array programming with {NumPy}},
	volume = {585},
	rights = {2020 The Author(s)},
	issn = {1476-4687},
	url = {https://www.nature.com/articles/s41586-020-2649-2},
	doi = {10.1038/s41586-020-2649-2},
	abstract = {Array programming provides a powerful, compact and expressive syntax for accessing, manipulating and operating on data in vectors, matrices and higher-dimensional arrays. {NumPy} is the primary array programming library for the Python language. It has an essential role in research analysis pipelines in fields as diverse as physics, chemistry, astronomy, geoscience, biology, psychology, materials science, engineering, finance and economics. For example, in astronomy, {NumPy} was an important part of the software stack used in the discovery of gravitational waves1 and in the first imaging of a black hole2. Here we review how a few fundamental array concepts lead to a simple and powerful programming paradigm for organizing, exploring and analysing scientific data. {NumPy} is the foundation upon which the scientific Python ecosystem is constructed. It is so pervasive that several projects, targeting audiences with specialized needs, have developed their own {NumPy}-like interfaces and array objects. Owing to its central position in the ecosystem, {NumPy} increasingly acts as an interoperability layer between such array computation libraries and, together with its application programming interface ({API}), provides a flexible framework to support the next decade of scientific and industrial analysis.},
	pages = {357--362},
	number = {7825},
	journaltitle = {Nature},
	author = {Harris, Charles R. and Millman, K. Jarrod and van der Walt, Stéfan J. and Gommers, Ralf and Virtanen, Pauli and Cournapeau, David and Wieser, Eric and Taylor, Julian and Berg, Sebastian and Smith, Nathaniel J. and Kern, Robert and Picus, Matti and Hoyer, Stephan and van Kerkwijk, Marten H. and Brett, Matthew and Haldane, Allan and del Río, Jaime Fernández and Wiebe, Mark and Peterson, Pearu and Gérard-Marchant, Pierre and Sheppard, Kevin and Reddy, Tyler and Weckesser, Warren and Abbasi, Hameer and Gohlke, Christoph and Oliphant, Travis E.},
	urldate = {2025-09-23},
	date = {2020-09},
	langid = {english},
	note = {Publisher: Nature Publishing Group},
	keywords = {Computational neuroscience, Computational science, Computer science, Software, Solar physics}
}

@incollection{paszke_pytorch_2019,
	location = {Red Hook, {NY}, {USA}},
	title = {{PyTorch}: an imperative style, high-performance deep learning library},
	shorttitle = {{PyTorch}},
	abstract = {Deep learning frameworks have often focused on either usability or speed, but not both. {PyTorch} is a machine learning library that shows that these two goals are in fact compatible: it provides an imperative and Pythonic programming style that supports code as a model, makes debugging easy and is consistent with other popular scientific computing libraries, while remaining efficient and supporting hardware accelerators such as {GPUs}.In this paper, we detail the principles that drove the implementation of {PyTorch} and how they are reflected in its architecture. We emphasize that every aspect of {PyTorch} is a regular Python program under the full control of its user. We also explain how the careful and pragmatic implementation of the key components of its runtime enables them to work together to achieve compelling performance. We demonstrate the efficiency of individual subsystems, as well as the overall speed of {PyTorch} on several common benchmarks.},
	pages = {8026--8037},
	number = {721},
	booktitle = {Proceedings of the 33rd International Conference on Neural Information Processing Systems},
	publisher = {Curran Associates Inc.},
	author = {Paszke, Adam and Gross, Sam and Massa, Francisco and Lerer, Adam and Bradbury, James and Chanan, Gregory and Killeen, Trevor and Lin, Zeming and Gimelshein, Natalia and Antiga, Luca and Desmaison, Alban and Köpf, Andreas and Yang, Edward and {DeVito}, Zach and Raison, Martin and Tejani, Alykhan and Chilamkurthy, Sasank and Steiner, Benoit and Fang, Lu and Bai, Junjie and Chintala, Soumith},
	urldate = {2025-09-23},
	date = {2019-12}
}
